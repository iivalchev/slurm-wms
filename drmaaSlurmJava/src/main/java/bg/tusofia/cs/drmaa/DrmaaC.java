package bg.tusofia.cs.drmaa;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.SizeT;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>libdrmaa</b><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .
 * 
 * @author Ivan Valchev (ivalchev,work@gmail.com)
 */
@Library("libdrmaa")
@Runtime(CRuntime.class)
public class DrmaaC {
	static {
		BridJ.register();
	}
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_USER_ON_HOLD = (int) 0x12;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_DRM_SYSTEM_BUFFER = (int) 1024;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_JOB_CATEGORY = (String) "drmaa_job_category";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_INVALID_ATTRIBUTE_FORMAT = (int) 13;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_PLACEHOLDER_HD = (String) "$drmaa_hd_ph$";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_ALREADY_ACTIVE_SESSION = (int) 11;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_UNDETERMINED = (int) 0x00;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_DEFAULT_CONTACT_STRING_ERROR = (int) 8;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_INTERNAL_ERROR = (int) 1;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_JOIN_FILES = (String) "drmaa_join_files";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_RUNNING = (int) 0x20;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_ERROR_PATH = (String) "drmaa_error_path";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_DURATION_SLIMIT = (String) "drmaa_duration_slimit";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_DRMAA_IMPL_BUFFER = (int) 1024;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_JOBNAME_BUFFER = (int) 128;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_CONTROL_RELEASE = (int) 3;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_V_ENV = (String) "drmaa_v_env";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_START_TIME = (String) "drmaa_start_time";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_RELEASE_INCONSISTENT_STATE = (int) 22;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_DENIED_BY_DRM = (int) 17;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_CONTROL_SUSPEND = (int) 0;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_DURATION_HLIMIT = (String) "drmaa_duration_hlimit";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_INVALID_ATTRIBUTE_VALUE = (int) 14;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ATTR_BUFFER = (int) 1024;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_PLACEHOLDER_WD = (String) "$drmaa_wd_ph$";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_INPUT_PATH = (String) "drmaa_input_path";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_DRMS_INIT_FAILED = (int) 10;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_V_EMAIL = (String) "drmaa_v_email";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_NATIVE_SPECIFICATION = (String) "drmaa_native_specification";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_NO_ACTIVE_SESSION = (int) 5;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_QUEUED_ACTIVE = (int) 0x10;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_DEADLINE_TIME = (String) "drmaa_deadline_time";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_TIMEOUT_NO_WAIT = (int) 0;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_USER_SYSTEM_SUSPENDED = (int) 0x23;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_NO_DEFAULT_CONTACT_STRING_SELECTED = (int) 9;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_SIGNAL_BUFFER = (int) 32;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_JOB_IDS_SESSION_ANY = (String) "DRMAA_JOB_IDS_SESSION_ANY";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_CONFLICTING_ATTRIBUTE_VALUES = (int) 15;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_SYSTEM_SUSPENDED = (int) 0x21;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_TIMEOUT_WAIT_FOREVER = (int) -1;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_EXIT_TIMEOUT = (int) 23;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_DONE = (int) 0x30;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_NO_MEMORY = (int) 6;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_PLACEHOLDER_INCR = (String) "$drmaa_incr_ph$";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_NO_RUSAGE = (int) 24;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_SUSPEND_INCONSISTENT_STATE = (int) 20;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_RESUME_INCONSISTENT_STATE = (int) 19;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_CONTACT_BUFFER = (int) 1024;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_WCT_SLIMIT = (String) "drmaa_wct_slimit";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_TRY_LATER = (int) 16;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_SUBMISSION_STATE_HOLD = (String) "drmaa_hold";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_V_ARGV = (String) "drmaa_v_argv";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_CONTROL_RESUME = (int) 1;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_CONTROL_TERMINATE = (int) 4;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_USER_SYSTEM_ON_HOLD = (int) 0x13;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_JS_STATE = (String) "drmaa_js_state";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERROR_STRING_BUFFER = (int) 4096;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_REMOTE_COMMAND = (String) "drmaa_remote_command";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_INVALID_CONTACT_STRING = (int) 7;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_NO_MORE_ELEMENTS = (int) 25;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_FAILED = (int) 0x40;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_USER_SUSPENDED = (int) 0x22;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_TRANSFER_FILES = (String) "drmaa_transfer_files";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_NO_ERRNO = (int) 26;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_PS_SYSTEM_ON_HOLD = (int) 0x11;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_INVALID_JOB = (int) 18;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_BLOCK_EMAIL = (String) "drmaa_block_email";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_INVALID_ARGUMENT = (int) 4;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_JOB_NAME = (String) "drmaa_job_name";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_AUTH_FAILURE = (int) 3;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_JOB_IDS_SESSION_ALL = (String) "DRMAA_JOB_IDS_SESSION_ALL";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_HOLD_INCONSISTENT_STATE = (int) 21;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_SUCCESS = (int) 0;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_WD = (String) "drmaa_wd";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_CONTROL_HOLD = (int) 2;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_WCT_HLIMIT = (String) "drmaa_wct_hlimit";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_DRMS_EXIT_ERROR = (int) 12;
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_SUBMISSION_STATE_ACTIVE = (String) "drmaa_active";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final String DRMAA_OUTPUT_PATH = (String) "drmaa_output_path";
	/** <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h</i> */
	public static final int DRMAA_ERRNO_DRM_COMMUNICATION_FAILURE = (int) 2;

	/**
	 * The drmaa_init() function SHALL initialize DRMAA library and create<br>
	 * a new DRMAA session, using the contact parameter, if provided, to<br>
	 * determine to which DRMS to connect. This function MUST be called<br>
	 * before any other DRMAA function, except for drmaa_get_DRM_system(),<br>
	 * drmaa_get_DRMAA_implementation(), drmaa_get_contact(), and<br>
	 * drmaa_strerror(). If @a contact is @c NULL, the default DRM system<br>
	 * SHALL be used, provided there is only one DRMAA implementation<br>
	 * in the provided binary module. When there is more than one DRMAA<br>
	 * implementation in the binary module, drmaa_init() SHALL return<br>
	 * the DRMAA_ERRNO_NO_DEFAULT_CONTACT_STRING_SELECTED error code.<br>
	 * The drmaa_init() function SHOULD be called by only one of the threads.<br>
	 * The main thread is RECOMMENDED. A call by another thread SHALL return<br>
	 * the DRMAA_ERRNO_ALREADY_ACTIVE_SESSION error code.<br>
	 * Original signature :
	 * <code>int drmaa_init(const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:21</i>
	 */
	public static int drmaa_init(Pointer<Byte> contact,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_init(Pointer.getPeer(contact),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_init(@Ptr long contact,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The drmaa_exit() function SHALL disengage from DRMAA library and<br>
	 * allow the DRMAA library to perform any necessary internal cleanup.<br>
	 * This routine SHALL end the current DRMAA session but SHALL NOT<br>
	 * affect any jobs (e.g, queued and running jobs SHALL remain queued and<br>
	 * running). drmaa_exit() SHOULD be called by only one of the threads.<br>
	 * The first call to call drmaa_exit() by a thread will operate normally.<br>
	 * All other calls from the same and other threads SHALL fail, returning<br>
	 * a DRMAA_ERRNO_NO_ACTIVE_SESSION error code.<br>
	 * Original signature : <code>int drmaa_exit(char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:33</i>
	 */
	public static int drmaa_exit(Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_exit(Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_exit(@Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The function drmaa_allocate_job_template() SHALL allocate a new job<br>
	 * template, returned in @a jt. This template is used to describe the<br>
	 * job to be submitted. This description is accomplished by setting the<br>
	 * desired scalar and vector attributes to their appropriate values. This<br>
	 * template is then used in the job submission process.<br>
	 * 
	 * @addtogroup drmaa_jobt<br>
	 *             Original signature :
	 *             <code>int drmaa_allocate_job_template(drmaa_job_template_t**, char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:43</i>
	 */
	public static int drmaa_allocate_job_template(
			Pointer<Pointer<DrmaaC.drmaa_job_template_s>> jt,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_allocate_job_template(Pointer.getPeer(jt),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_allocate_job_template(@Ptr long jt,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The function drmaa_delete_job_template() SHALL free the job template<br>
	 * pointed to by @a jt.<br>
	 * 
	 * @addtogroup drmaa_jobt<br>
	 *             Original signature :
	 *             <code>int drmaa_delete_job_template(drmaa_job_template_t*, char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:50</i>
	 */
	public static int drmaa_delete_job_template(
			Pointer<DrmaaC.drmaa_job_template_s> jt,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_delete_job_template(Pointer.getPeer(jt),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_delete_job_template(@Ptr long jt,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The function drmaa_set_attribute() SHALL set the value of the scalar<br>
	 * attribute, @a name, in the job template, @a jt, to the value, @a value.<br>
	 * 
	 * @addtogroup drmaa_jobt<br>
	 *             Original signature :
	 *             <code>int drmaa_set_attribute(drmaa_job_template_t*, const char*, const char*, char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:57</i>
	 */
	public static int drmaa_set_attribute(
			Pointer<DrmaaC.drmaa_job_template_s> jt, Pointer<Byte> name,
			Pointer<Byte> value, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_set_attribute(Pointer.getPeer(jt), Pointer.getPeer(name),
				Pointer.getPeer(value), Pointer.getPeer(error_diagnosis),
				error_diag_len);
	}

	protected native static int drmaa_set_attribute(@Ptr long jt,
			@Ptr long name, @Ptr long value, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The function drmaa_get_attribute() SHALL fill the @a value buffer with<br>
	 * up to @a value_len characters of the scalar attribute, @a name's, value<br>
	 * in the given job template.<br>
	 * 
	 * @addtogroup drmaa_jobt<br>
	 *             Original signature :
	 *             <code>int drmaa_get_attribute(drmaa_job_template_t*, const char*, char*, size_t, char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:65</i>
	 */
	public static int drmaa_get_attribute(
			Pointer<DrmaaC.drmaa_job_template_s> jt, Pointer<Byte> name,
			Pointer<Byte> value, @Ptr long value_len,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_get_attribute(Pointer.getPeer(jt), Pointer.getPeer(name),
				Pointer.getPeer(value), value_len,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_get_attribute(@Ptr long jt,
			@Ptr long name, @Ptr long value, @Ptr long value_len,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The function drmaa_set_vector_attribute() SHALL set the vector attribute,<br>
	 * 
	 * @a name, in the job template, @a jt, to the value(s), @a value. The DRMAA<br>
	 *    implementation MUST accept value values that are arrays of one or more<br>
	 *    strings terminated by a @c NULL entry.<br>
	 * @addtogroup drmaa_jobt<br>
	 *             Original signature :
	 *             <code>int drmaa_set_vector_attribute(drmaa_job_template_t*, const char*, const char*[], char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:74</i>
	 */
	public static int drmaa_set_vector_attribute(
			Pointer<DrmaaC.drmaa_job_template_s> jt, Pointer<Byte> name,
			Pointer<Pointer<Byte>> value, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_set_vector_attribute(Pointer.getPeer(jt),
				Pointer.getPeer(name), Pointer.getPeer(value),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_set_vector_attribute(@Ptr long jt,
			@Ptr long name, @Ptr long value, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The function drmaa_get_vector_attribute() SHALL store in @a values an<br>
	 * opaque values string vector containing the values of the vector
	 * attribute,<br>
	 * 
	 * @a name's, value in the given job template.<br>
	 * @addtogroup drmaa_jobt<br>
	 *             Original signature :
	 *             <code>int drmaa_get_vector_attribute(drmaa_job_template_t*, const char*, drmaa_attr_values_t**, char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:82</i>
	 */
	public static int drmaa_get_vector_attribute(
			Pointer<DrmaaC.drmaa_job_template_s> jt, Pointer<Byte> name,
			Pointer<Pointer<DrmaaC.drmaa_attr_values_s>> values,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_get_vector_attribute(Pointer.getPeer(jt),
				Pointer.getPeer(name), Pointer.getPeer(values),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_get_vector_attribute(@Ptr long jt,
			@Ptr long name, @Ptr long values, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The function drmaa_get_attribute_names() SHALL return the set of
	 * supported<br>
	 * scalar attribute names in an opaque names string vector stored in<br>
	 * 
	 * @a values. This vector SHALL include all required scalar attributes, all<br>
	 *    supported optional scalar attributes, all DRM-specific scalar
	 *    attributes,<br>
	 *    and no unsupported optional attributes.<br>
	 *    Original signature :
	 *    <code>int drmaa_get_attribute_names(drmaa_attr_names_t**, char*, size_t)</code>
	 * <br>
	 *    <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:91</i>
	 */
	public static int drmaa_get_attribute_names(
			Pointer<Pointer<DrmaaC.drmaa_attr_names_s>> values,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_get_attribute_names(Pointer.getPeer(values),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_get_attribute_names(@Ptr long values,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The function drmaa_get_vector_attribute_names() SHALL return the set<br>
	 * of supported vector attribute names in an opaque names string vector<br>
	 * stored in @a values. This vector SHALL include all required vector<br>
	 * attributes, all supported optional vector attributes, all DRM-specific<br>
	 * vector attributes, and no unsupported optional attributes.<br>
	 * Original signature :
	 * <code>int drmaa_get_vector_attribute_names(drmaa_attr_names_t**, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:100</i>
	 */
	public static int drmaa_get_vector_attribute_names(
			Pointer<Pointer<DrmaaC.drmaa_attr_names_s>> values,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_get_vector_attribute_names(Pointer.getPeer(values),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_get_vector_attribute_names(
			@Ptr long values, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * @addtogroup drmaa_viter @{<br>
	 *             Original signature :
	 *             <code>int drmaa_get_next_attr_name(drmaa_attr_names_t*, char*, size_t)</code>
	 * <br>
	 *             <i>native declaration :
	 *             /usr/lib/slurm-drmaa/include/drmaa.h:105</i>
	 */
	public static int drmaa_get_next_attr_name(
			Pointer<DrmaaC.drmaa_attr_names_s> values, Pointer<Byte> value,
			@Ptr long value_len) {
		return drmaa_get_next_attr_name(Pointer.getPeer(values),
				Pointer.getPeer(value), value_len);
	}

	protected native static int drmaa_get_next_attr_name(@Ptr long values,
			@Ptr long value, @Ptr long value_len);

	/**
	 * Original signature :
	 * <code>int drmaa_get_next_attr_value(drmaa_attr_values_t*, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:107</i>
	 */
	public static int drmaa_get_next_attr_value(
			Pointer<DrmaaC.drmaa_attr_values_s> values,
			Pointer<Byte> value, @Ptr long value_len) {
		return drmaa_get_next_attr_value(Pointer.getPeer(values),
				Pointer.getPeer(value), value_len);
	}

	protected native static int drmaa_get_next_attr_value(@Ptr long values,
			@Ptr long value, @Ptr long value_len);

	/**
	 * Original signature :
	 * <code>int drmaa_get_next_job_id(drmaa_job_ids_t*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:109</i>
	 */
	public static int drmaa_get_next_job_id(
			Pointer<DrmaaC.drmaa_job_ids_s> values, Pointer<Byte> value,
			@Ptr long value_len) {
		return drmaa_get_next_job_id(Pointer.getPeer(values),
				Pointer.getPeer(value), value_len);
	}

	protected native static int drmaa_get_next_job_id(@Ptr long values,
			@Ptr long value, @Ptr long value_len);

	/**
	 * Original signature :
	 * <code>int drmaa_get_num_attr_names(drmaa_attr_names_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:111</i>
	 */
	public static int drmaa_get_num_attr_names(
			Pointer<DrmaaC.drmaa_attr_names_s> values, Pointer<SizeT> size) {
		return drmaa_get_num_attr_names(Pointer.getPeer(values),
				Pointer.getPeer(size));
	}

	protected native static int drmaa_get_num_attr_names(@Ptr long values,
			@Ptr long size);

	/**
	 * Original signature :
	 * <code>int drmaa_get_num_attr_values(drmaa_attr_values_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:113</i>
	 */
	public static int drmaa_get_num_attr_values(
			Pointer<DrmaaC.drmaa_attr_values_s> values, Pointer<SizeT> size) {
		return drmaa_get_num_attr_values(Pointer.getPeer(values),
				Pointer.getPeer(size));
	}

	protected native static int drmaa_get_num_attr_values(@Ptr long values,
			@Ptr long size);

	/**
	 * Original signature :
	 * <code>int drmaa_get_num_job_ids(drmaa_job_ids_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:115</i>
	 */
	public static int drmaa_get_num_job_ids(
			Pointer<DrmaaC.drmaa_job_ids_s> values, Pointer<SizeT> size) {
		return drmaa_get_num_job_ids(Pointer.getPeer(values),
				Pointer.getPeer(size));
	}

	protected native static int drmaa_get_num_job_ids(@Ptr long values,
			@Ptr long size);

	/**
	 * Original signature :
	 * <code>void drmaa_release_attr_names(drmaa_attr_names_t*)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:117</i>
	 */
	public static void drmaa_release_attr_names(
			Pointer<DrmaaC.drmaa_attr_names_s> values) {
		drmaa_release_attr_names(Pointer.getPeer(values));
	}

	protected native static void drmaa_release_attr_names(@Ptr long values);

	/**
	 * Original signature :
	 * <code>void drmaa_release_attr_values(drmaa_attr_values_t*)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:119</i>
	 */
	public static void drmaa_release_attr_values(
			Pointer<DrmaaC.drmaa_attr_values_s> values) {
		drmaa_release_attr_values(Pointer.getPeer(values));
	}

	protected native static void drmaa_release_attr_values(@Ptr long values);

	/**
	 * Original signature :
	 * <code>void drmaa_release_job_ids(drmaa_job_ids_t*)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:121</i>
	 */
	public static void drmaa_release_job_ids(
			Pointer<DrmaaC.drmaa_job_ids_s> values) {
		drmaa_release_job_ids(Pointer.getPeer(values));
	}

	protected native static void drmaa_release_job_ids(@Ptr long values);

	/**
	 * The drmaa_run_job() function submits a single job with the attributes<br>
	 * defined in the job template, @a jt. Upon success, up to @a job_id_len<br>
	 * characters of the submitted job's job identifier are stored in the
	 * buffer,<br>
	 * 
	 * @a job_id.<br>
	 *    Original signature :
	 *    <code>int drmaa_run_job(char*, size_t, const drmaa_job_template_t*, char*, size_t)</code>
	 * <br>
	 *    <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:129</i>
	 */
	public static int drmaa_run_job(Pointer<Byte> job_id, @Ptr long job_id_len,
			Pointer<DrmaaC.drmaa_job_template_s> jt,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_run_job(Pointer.getPeer(job_id), job_id_len,
				Pointer.getPeer(jt), Pointer.getPeer(error_diagnosis),
				error_diag_len);
	}

	protected native static int drmaa_run_job(@Ptr long job_id,
			@Ptr long job_id_len, @Ptr long jt, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The drmaa_run_bulk_jobs() function submits a set of parametric jobs which<br>
	 * can be run concurrently. The attributes defined in the job template,<br>
	 * 
	 * @a jt are used for every parametric job in the set. Each job in the<br>
	 *    set is identical except for it's index. The first parametric job has
	 *    an<br>
	 *    index equal to @a start. The next job has an index equal to @a start +<br>
	 * @a incr, and so on. The last job has an index equal to
	 *    <code>start + n *<br>
	 * incr</code>, where @c n is equal to <code>(end - start) / incr</code>.<br>
	 *    Note that the value of the last job's index may not be equal to end if
	 *    the<br>
	 *    difference between @a start and @a end is not evenly divisble by @a
	 *    incr.<br>
	 *    The smallest valid value for @a start is 1. The largest valid value
	 *    for<br>
	 * @a end is 2147483647 (2^31-1). The @a start value must be less than or<br>
	 *    equal to the @a end value, and only positive index numbers are
	 *    allowed.<br>
	 *    The index number can be determined by the job in an implementation<br>
	 *    specific fashion. On success, an opaque job id string vector
	 *    containing<br>
	 *    job identifiers for all submitted jobs SHALL be returned into @a
	 *    job_ids.<br>
	 *    The job identifiers in the opaque job id string vector can be
	 *    extracted<br>
	 *    using the drmaa_get_next_job_id() function. The caller is responsible<br>
	 *    for releasing the opaque job id string vector returned into @a job_ids<br>
	 *    using the drmaa_release_job_ids() function.<br>
	 *    Original signature :
	 *    <code>int drmaa_run_bulk_jobs(drmaa_job_ids_t**, const drmaa_job_template_t*, int, int, int, char*, size_t)</code>
	 * <br>
	 *    <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:152</i>
	 */
	public static int drmaa_run_bulk_jobs(
			Pointer<Pointer<DrmaaC.drmaa_job_ids_s>> jobids,
			Pointer<DrmaaC.drmaa_job_template_s> jt, int start, int end,
			int incr, Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_run_bulk_jobs(Pointer.getPeer(jobids),
				Pointer.getPeer(jt), start, end, incr,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_run_bulk_jobs(@Ptr long jobids,
			@Ptr long jt, int start, int end, int incr,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The drmaa_control() function SHALL enact the action indicated<br>
	 * by @a action on the job specified by the job identifier, @a jobid.<br>
	 * The action parameter's value may be one of the following:<br>
	 * - DRMAA_CONTROL_SUSPEND<br>
	 * - DRMAA_CONTROL_RESUME<br>
	 * - DRMAA_CONTROL_HOLD<br>
	 * - DRMAA_CONTROL_RELEASE<br>
	 * - DRMAA_CONTROL_TERMINATE<br>
	 * The drmaa_control() function SHALL return after the DRM system has<br>
	 * acknowledged the command, not necessarily after the desired action has<br>
	 * been performed. If @a jobid is DRMAA_JOB_IDS_SESSION_ALL, this function<br>
	 * SHALL perform the specified action on all jobs submitted during this<br>
	 * session as of this function is called.<br>
	 * Original signature :
	 * <code>int drmaa_control(const char*, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:169</i>
	 */
	public static int drmaa_control(Pointer<Byte> job_id, int action,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_control(Pointer.getPeer(job_id), action,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_control(@Ptr long job_id, int action,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The drmaa_job_ps() function SHALL store in @a remote_ps the program<br>
	 * status of the job identified by @a job_id. The possible values of<br>
	 * a program's staus are:<br>
	 * - DRMAA_PS_UNDETERMINED<br>
	 * - DRMAA_PS_QUEUED_ACTIVE<br>
	 * - DRMAA_PS_SYSTEM_ON_HOLD<br>
	 * - DRMAA_PS_USER_ON_HOLD<br>
	 * - DRMAA_PS_USER_SYSTEM_ON_HOLD<br>
	 * - DRMAA_PS_RUNNING<br>
	 * - DRMAA_PS_SYSTEM_SUSPENDED<br>
	 * - DRMAA_PS_USER_SUSPENDED<br>
	 * - DRMAA_PS_DONE<br>
	 * - DRMAA_PS_FAILED<br>
	 * Terminated jobs have a status of DRMAA_PS_FAILED.<br>
	 * Original signature :
	 * <code>int drmaa_job_ps(const char*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:187</i>
	 */
	public static int drmaa_job_ps(Pointer<Byte> job_id,
			Pointer<Integer> remote_ps, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_job_ps(Pointer.getPeer(job_id),
				Pointer.getPeer(remote_ps), Pointer.getPeer(error_diagnosis),
				error_diag_len);
	}

	protected native static int drmaa_job_ps(@Ptr long job_id,
			@Ptr long remote_ps, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The drmaa_synchronize() function SHALL cause the calling thread to<br>
	 * block until all jobs specified by @a job_ids have finished execution.<br>
	 * If @a job_ids contains DRMAA_JOB_IDS_SESSION_ALL, then this function<br>
	 * SHALL wait for all jobs submitted during this DRMAA session as of the<br>
	 * point in time when drmaa_synchronize() is called. To avoid thread race<br>
	 * conditions in multithreaded applications, the DRMAA implementation user<br>
	 * should explicitly synchronize this call with any other job submission<br>
	 * calls or control calls that may change the number of remote jobs.<br>
	 * * The @a timeout parameter value indicates how many seconds to remain<br>
	 * blocked in this call waiting for results to become available, before<br>
	 * returning with a DRMAA_ERRNO_EXIT_TIMEOUT error code. The value,<br>
	 * DRMAA_TIMEOUT_WAIT_FOREVER, MAY be specified to wait indefinitely for<br>
	 * a result. The value, DRMAA_TIMEOUT_NO_WAIT, MAY be specified to return<br>
	 * immediately with a DRMAA_ERRNO_EXIT_TIMEOUT error code if no result is<br>
	 * available. If the call exits before the timeout has elapsed, all the<br>
	 * jobs have been waited on or there was an interrupt. The caller should<br>
	 * check system time before and after this call in order to be sure of how<br>
	 * much time has passed. The @a dispose parameter specifies how to treat<br>
	 * the reaping of the remote job's internal data record, which includes a<br>
	 * record of the job's consumption of system resources during its execution<br>
	 * and other statistical information. If the @a dispose parameter's value<br>
	 * is 1, the DRMAA implementation SHALL dispose of the job's data record at<br>
	 * the end of the drmaa_synchroniize() call. If the @a dispose parameter's<br>
	 * value is 0, the data record SHALL be left for future access via the<br>
	 * drmaa_wait() method.<br>
	 * Original signature :
	 * <code>int drmaa_synchronize(const char*[], signed long, int, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:216</i>
	 */
	public static int drmaa_synchronize(Pointer<Pointer<Byte>> job_ids,
			@CLong long timeout, int dispose, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_synchronize(Pointer.getPeer(job_ids), timeout, dispose,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_synchronize(@Ptr long job_ids,
			@CLong long timeout, int dispose, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The drmaa_wait() function SHALL wait for a job identified by @a job_id<br>
	 * to finish execution or fail. If the special string, JOB_IDS_SESSION_ANY,<br>
	 * is provided as the job_id, this function will wait for any job from the<br>
	 * session to finish execution or fail. In this case, any job for which exit<br>
	 * status information is available will satisfy the requirement, including<br>
	 * jobs which preivously finished but have never been the subject of a<br>
	 * drmaa_wait() call. This routine is modeled on the @c wait3 POSIX routine.<br>
	 * * The @a timeout parameter value indicates how many seconds<br>
	 * to remain blocked in this call waiting for a result, before<br>
	 * returning with a DRMAA_ERRNO_EXIT_TIMEOUT error code. The value,<br>
	 * DRMAA_TIMEOUT_WAIT_FOREVER, MAY be specified to wait indefinitely for<br>
	 * a result. The value, DRMAA_TIMEOUT_NO_WAIT, MAY be specified to return<br>
	 * immediately with a DRMAA_ERRNO_EXIT_TIMEOUT error code if no result is<br>
	 * available. If the call exits before the timeout has elapsed, the job<br>
	 * has been successfully waited on or there was an interrupt. The caller<br>
	 * should check system time before and after this call in order to be sure<br>
	 * of how much time has passed.<br>
	 * * Upon success, drmaa_wait() fills @a job_id_out with up to @a<br>
	 * job_id_out_len characters of the waited job's id, stat with the<br>
	 * a code that includes information about the conditions under which<br>
	 * the job terminated, and @a rusage with an array of <name>=<value><br>
	 * strings that describe the amount of resources consumed by the job<br>
	 * and are implementation defined. The @a stat parameter is further<br>
	 * described below. The @a rusage parameter's values may be accessed via<br>
	 * drmaa_get_next_attr_value().<br>
	 * * The drmaa_wait() function reaps job data records on a successful<br>
	 * call, so any subsequent calls to drmaa_wait() will fail, returning<br>
	 * a DRMAA_ERRNO_INVALID_JOB error code, meaning that the job's data<br>
	 * record has already been reaped. This error code is the same as<br>
	 * if the job were unknown. If drmaa_wait() exists due to a timeout,<br>
	 * DRMAA_ERRNO_EXIT_TIMEOUT is returned and no rusage information is reaped.<br>
	 * (The only case where drmaa_wait() can be successfully called on a single<br>
	 * job more than once is when the previous call(s) to drmaa_wait() returned<br>
	 * DRMAA_ERRNO_EXIT_TIMEOUT.)<br>
	 * * The stat parameter, set by a successful call to drmaa_wait(), is used<br>
	 * to retrieve further input about the exit condition of the waited<br>
	 * job, identified by job_id_out, through the following functions:<br>
	 * drmaa_wifexited(), drmaa_wexitstatus(), drmaa_wifsignaled(),<br>
	 * drmaa_wtermsig(),drmaa_wcoredump() and drmaa_wifaborted().<br>
	 * Original signature :
	 * <code>int drmaa_wait(const char*, char*, size_t, int*, signed long, drmaa_attr_values_t**, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:259</i>
	 */
	public static int drmaa_wait(Pointer<Byte> job_id,
			Pointer<Byte> job_id_out, @Ptr long job_id_out_len,
			Pointer<Integer> stat, @CLong long timeout,
			Pointer<Pointer<DrmaaC.drmaa_attr_values_s>> rusage,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_wait(Pointer.getPeer(job_id), Pointer.getPeer(job_id_out),
				job_id_out_len, Pointer.getPeer(stat), timeout,
				Pointer.getPeer(rusage), Pointer.getPeer(error_diagnosis),
				error_diag_len);
	}

	protected native static int drmaa_wait(@Ptr long job_id,
			@Ptr long job_id_out, @Ptr long job_id_out_len, @Ptr long stat,
			@CLong long timeout, @Ptr long rusage, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_wifexited(int*, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:261</i>
	 */
	public static int drmaa_wifexited(Pointer<Integer> exited, int stat,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_wifexited(Pointer.getPeer(exited), stat,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_wifexited(@Ptr long exited, int stat,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_wexitstatus(int*, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:263</i>
	 */
	public static int drmaa_wexitstatus(Pointer<Integer> exit_status, int stat,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_wexitstatus(Pointer.getPeer(exit_status), stat,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_wexitstatus(@Ptr long exit_status,
			int stat, @Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_wifsignaled(int*, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:265</i>
	 */
	public static int drmaa_wifsignaled(Pointer<Integer> signaled, int stat,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_wifsignaled(Pointer.getPeer(signaled), stat,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_wifsignaled(@Ptr long signaled, int stat,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_wtermsig(char*, size_t, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:267</i>
	 */
	public static int drmaa_wtermsig(Pointer<Byte> signal,
			@Ptr long signal_len, int stat, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_wtermsig(Pointer.getPeer(signal), signal_len, stat,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_wtermsig(@Ptr long signal,
			@Ptr long signal_len, int stat, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_wcoredump(int*, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:269</i>
	 */
	public static int drmaa_wcoredump(Pointer<Integer> core_dumped, int stat,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_wcoredump(Pointer.getPeer(core_dumped), stat,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_wcoredump(@Ptr long core_dumped,
			int stat, @Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_wifaborted(int*, int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:271</i>
	 */
	public static int drmaa_wifaborted(Pointer<Integer> aborted, int stat,
			Pointer<Byte> error_diagnosis, @Ptr long error_diag_len) {
		return drmaa_wifaborted(Pointer.getPeer(aborted), stat,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_wifaborted(@Ptr long aborted, int stat,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The drmaa_strerror() function SHALL return the error string describing<br>
	 * the DRMAA error number @a drmaa_errno.<br>
	 * Original signature : <code>char* drmaa_strerror(int)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:277</i>
	 */
	public static Pointer<Byte> drmaa_strerror(int drmaa_errno) {
		return Pointer.pointerToAddress(drmaa_strerror$2(drmaa_errno),
				Byte.class);
	}

	@Ptr
	@Name("drmaa_strerror")
	protected native static long drmaa_strerror$2(int drmaa_errno);

	/**
	 * The drmaa_get_contact() function, if called before drmaa_init(), SHALL<br>
	 * return a string containing a comma-delimited list of default DRMAA<br>
	 * implementation contacts strings, one per DRM implementation provided.<br>
	 * If called after drmaa_init(), drmaa_get_contacts() SHALL return the<br>
	 * contact string for the DRM system for which the library has been<br>
	 * initialized.<br>
	 * Original signature :
	 * <code>int drmaa_get_contact(char*, size_t, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:287</i>
	 */
	public static int drmaa_get_contact(Pointer<Byte> contact,
			@Ptr long contact_len, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_get_contact(Pointer.getPeer(contact), contact_len,
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_get_contact(@Ptr long contact,
			@Ptr long contact_len, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The drmaa_version() function SHALL set major and minor to the major and<br>
	 * minor versions of the DRMAA C binding specification implemented by the<br>
	 * DRMAA implementation.<br>
	 * Original signature :
	 * <code>int drmaa_version(unsigned int*, unsigned int*, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:294</i>
	 */
	public static int drmaa_version(Pointer<Integer> major,
			Pointer<Integer> minor, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_version(Pointer.getPeer(major), Pointer.getPeer(minor),
				Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_version(@Ptr long major, @Ptr long minor,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * The drmaa_get_DRM_system() function, if called before drmaa_init(),<br>
	 * SHALL return a string containing a comma-delimited list of DRM system<br>
	 * identifiers, one per DRM system implementation provided. If called after<br>
	 * drmaa_init(), drmaa_get_DRM_system() SHALL return the selected DRM
	 * system.<br>
	 * Original signature :
	 * <code>int drmaa_get_DRM_system(char*, size_t, char*, size_t)</code><br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:302</i>
	 */
	public static int drmaa_get_DRM_system(Pointer<Byte> drm_system,
			@Ptr long drm_system_len, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_get_DRM_system(Pointer.getPeer(drm_system),
				drm_system_len, Pointer.getPeer(error_diagnosis),
				error_diag_len);
	}

	protected native static int drmaa_get_DRM_system(@Ptr long drm_system,
			@Ptr long drm_system_len, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * The drmaa_get_DRMAA_implementation() function, if called before<br>
	 * drmaa_init(), SHALL return a string containing a comma-delimited list of<br>
	 * DRMAA implementations, one per DRMAA implementation provided. If called<br>
	 * after drmaa_init(), drmaa_get_DRMAA_implementation() SHALL return the<br>
	 * selected DRMAA implementation.<br>
	 * Original signature :
	 * <code>int drmaa_get_DRMAA_implementation(char*, size_t, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:311</i>
	 */
	public static int drmaa_get_DRMAA_implementation(Pointer<Byte> drmaa_impl,
			@Ptr long drmaa_impl_len, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_get_DRMAA_implementation(Pointer.getPeer(drmaa_impl),
				drmaa_impl_len, Pointer.getPeer(error_diagnosis),
				error_diag_len);
	}

	protected native static int drmaa_get_DRMAA_implementation(
			@Ptr long drmaa_impl, @Ptr long drmaa_impl_len,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_read_configuration_file(const char*, int, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:313</i>
	 */
	public static int drmaa_read_configuration_file(Pointer<Byte> filename,
			int must_exist, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_read_configuration_file(Pointer.getPeer(filename),
				must_exist, Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_read_configuration_file(
			@Ptr long filename, int must_exist, @Ptr long error_diagnosis,
			@Ptr long error_diag_len);

	/**
	 * Original signature :
	 * <code>int drmaa_read_configuration(const char*, size_t, char*, size_t)</code>
	 * <br>
	 * <i>native declaration : /usr/lib/slurm-drmaa/include/drmaa.h:315</i>
	 */
	public static int drmaa_read_configuration(Pointer<Byte> configuration,
			@Ptr long conf_len, Pointer<Byte> error_diagnosis,
			@Ptr long error_diag_len) {
		return drmaa_read_configuration(Pointer.getPeer(configuration),
				conf_len, Pointer.getPeer(error_diagnosis), error_diag_len);
	}

	protected native static int drmaa_read_configuration(
			@Ptr long configuration, @Ptr long conf_len,
			@Ptr long error_diagnosis, @Ptr long error_diag_len);

	/** Undefined type */
	public static interface drmaa_job_ids_s {

	};

	/** Undefined type */
	public static interface drmaa_job_template_s {

	};

	/** Undefined type */
	public static interface drmaa_attr_names_s {

	};

	/** Undefined type */
	public static interface drmaa_attr_values_s {

	};
}
